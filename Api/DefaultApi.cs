/*
 * Simple emlpoyee contract tracker api
 *
 * This API allows management of client contracts and tracks history of employee contract assignments 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using SimpleTracker.Web.Client;
using SimpleTracker.Web.Models;

namespace SimpleTracker.Web.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a client by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns></returns>
        void ClientsClientIdDelete (int clientId);

        /// <summary>
        /// Delete a client by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClientsClientIdDeleteWithHttpInfo (int clientId);
        /// <summary>
        /// Get a client by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ModelClient</returns>
        ModelClient ClientsClientIdGet (int clientId);

        /// <summary>
        /// Get a client by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ApiResponse of ModelClient</returns>
        ApiResponse<ModelClient> ClientsClientIdGetWithHttpInfo (int clientId);
        /// <summary>
        /// Update a client by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="clientsPostRequest"></param>
        /// <returns>ModelClient</returns>
        ModelClient ClientsClientIdPut (int clientId, ClientsPostRequest clientsPostRequest);

        /// <summary>
        /// Update a client by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="clientsPostRequest"></param>
        /// <returns>ApiResponse of ModelClient</returns>
        ApiResponse<ModelClient> ClientsClientIdPutWithHttpInfo (int clientId, ClientsPostRequest clientsPostRequest);
        /// <summary>
        /// Get all clients
        /// </summary>
        /// <remarks>
        /// Retrieves all clients
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<ModelClient></returns>
        List<ModelClient> ClientsGet ();

        /// <summary>
        /// Get all clients
        /// </summary>
        /// <remarks>
        /// Retrieves all clients
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<ModelClient></returns>
        ApiResponse<List<ModelClient>> ClientsGetWithHttpInfo ();
        /// <summary>
        /// Create new client
        /// </summary>
        /// <remarks>
        /// Add a new client with given name and url
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientsPostRequest"></param>
        /// <returns>ModelClient</returns>
        ModelClient ClientsPost (ClientsPostRequest clientsPostRequest);

        /// <summary>
        /// Create new client
        /// </summary>
        /// <remarks>
        /// Add a new client with given name and url
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientsPostRequest"></param>
        /// <returns>ApiResponse of ModelClient</returns>
        ApiResponse<ModelClient> ClientsPostWithHttpInfo (ClientsPostRequest clientsPostRequest);
        /// <summary>
        /// Delete a contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <returns></returns>
        void ContractsContractIdDelete (int contractId);

        /// <summary>
        /// Delete a contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContractsContractIdDeleteWithHttpInfo (int contractId);
        /// <summary>
        /// Get a contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <returns>Contract</returns>
        Contract ContractsContractIdGet (int contractId);

        /// <summary>
        /// Get a contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <returns>ApiResponse of Contract</returns>
        ApiResponse<Contract> ContractsContractIdGetWithHttpInfo (int contractId);
        /// <summary>
        /// Update a contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="contractPatch"></param>
        /// <returns>Contract</returns>
        Contract ContractsContractIdPut (int contractId, ContractPatch contractPatch);

        /// <summary>
        /// Update a contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="contractPatch"></param>
        /// <returns>ApiResponse of Contract</returns>
        ApiResponse<Contract> ContractsContractIdPutWithHttpInfo (int contractId, ContractPatch contractPatch);
        /// <summary>
        /// Get all contracts
        /// </summary>
        /// <remarks>
        /// Retrieves all contracts
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<Contract></returns>
        List<Contract> ContractsGet ();

        /// <summary>
        /// Get all contracts
        /// </summary>
        /// <remarks>
        /// Retrieves all contracts
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<Contract></returns>
        ApiResponse<List<Contract>> ContractsGetWithHttpInfo ();
        /// <summary>
        /// Create new contract
        /// </summary>
        /// <remarks>
        /// Add a new contract with fields
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractPatch"></param>
        /// <returns>Contract</returns>
        Contract ContractsPost (ContractPatch contractPatch);

        /// <summary>
        /// Create new contract
        /// </summary>
        /// <remarks>
        /// Add a new contract with fields
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractPatch"></param>
        /// <returns>ApiResponse of Contract</returns>
        ApiResponse<Contract> ContractsPostWithHttpInfo (ContractPatch contractPatch);
        /// <summary>
        /// Delete an employee by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <returns></returns>
        void EmployeesEmployeeIdDelete (int employeeId);

        /// <summary>
        /// Delete an employee by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EmployeesEmployeeIdDeleteWithHttpInfo (int employeeId);
        /// <summary>
        /// Get an employee by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <returns>Employee</returns>
        Employee EmployeesEmployeeIdGet (int employeeId);

        /// <summary>
        /// Get an employee by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <returns>ApiResponse of Employee</returns>
        ApiResponse<Employee> EmployeesEmployeeIdGetWithHttpInfo (int employeeId);
        /// <summary>
        /// Update an employee by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="employeesPostRequest"></param>
        /// <returns>Employee</returns>
        Employee EmployeesEmployeeIdPut (int employeeId, EmployeesPostRequest employeesPostRequest);

        /// <summary>
        /// Update an employee by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="employeesPostRequest"></param>
        /// <returns>ApiResponse of Employee</returns>
        ApiResponse<Employee> EmployeesEmployeeIdPutWithHttpInfo (int employeeId, EmployeesPostRequest employeesPostRequest);
        /// <summary>
        /// Get all employees
        /// </summary>
        /// <remarks>
        /// Retrieves all employees
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<Employee></returns>
        List<Employee> EmployeesGet ();

        /// <summary>
        /// Get all employees
        /// </summary>
        /// <remarks>
        /// Retrieves all employees
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<Employee></returns>
        ApiResponse<List<Employee>> EmployeesGetWithHttpInfo ();
        /// <summary>
        /// Create new employee
        /// </summary>
        /// <remarks>
        /// Add a new employee with given name and github username
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeesPostRequest"></param>
        /// <returns>Employee</returns>
        Employee EmployeesPost (EmployeesPostRequest employeesPostRequest);

        /// <summary>
        /// Create new employee
        /// </summary>
        /// <remarks>
        /// Add a new employee with given name and github username
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeesPostRequest"></param>
        /// <returns>ApiResponse of Employee</returns>
        ApiResponse<Employee> EmployeesPostWithHttpInfo (EmployeesPostRequest employeesPostRequest);
        /// <summary>
        /// Get all history
        /// </summary>
        /// <remarks>
        /// Retrieves all employee contract assignment history
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">numerical employee identifier (optional)</param>
        /// <param name="clientId">numerical client identifier (optional)</param>
        /// <param name="contractId">numerical contract identifier (optional)</param>
        /// <returns>List<History></returns>
        List<History> HistoryGet (int? employeeId = default(int?), int? clientId = default(int?), int? contractId = default(int?));

        /// <summary>
        /// Get all history
        /// </summary>
        /// <remarks>
        /// Retrieves all employee contract assignment history
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">numerical employee identifier (optional)</param>
        /// <param name="clientId">numerical client identifier (optional)</param>
        /// <param name="contractId">numerical contract identifier (optional)</param>
        /// <returns>ApiResponse of List<History></returns>
        ApiResponse<List<History>> HistoryGetWithHttpInfo (int? employeeId = default(int?), int? clientId = default(int?), int? contractId = default(int?));
        /// <summary>
        /// Delete an employee contract assignment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <returns></returns>
        void HistoryHistoryIdDelete (int historyId);

        /// <summary>
        /// Delete an employee contract assignment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HistoryHistoryIdDeleteWithHttpInfo (int historyId);
        /// <summary>
        /// Get an employee contract asignment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <returns>History</returns>
        History HistoryHistoryIdGet (int historyId);

        /// <summary>
        /// Get an employee contract asignment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <returns>ApiResponse of History</returns>
        ApiResponse<History> HistoryHistoryIdGetWithHttpInfo (int historyId);
        /// <summary>
        /// Update an employee contract assignment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="historyPatch"></param>
        /// <returns>Contract</returns>
        Contract HistoryHistoryIdPut (int historyId, HistoryPatch historyPatch);

        /// <summary>
        /// Update an employee contract assignment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="historyPatch"></param>
        /// <returns>ApiResponse of Contract</returns>
        ApiResponse<Contract> HistoryHistoryIdPutWithHttpInfo (int historyId, HistoryPatch historyPatch);
        /// <summary>
        /// Create new employee contract assignment
        /// </summary>
        /// <remarks>
        /// Add a new contract assignment with fields
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyPatch"></param>
        /// <returns>History</returns>
        History HistoryPost (HistoryPatch historyPatch);

        /// <summary>
        /// Create new employee contract assignment
        /// </summary>
        /// <remarks>
        /// Add a new contract assignment with fields
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyPatch"></param>
        /// <returns>ApiResponse of History</returns>
        ApiResponse<History> HistoryPostWithHttpInfo (HistoryPatch historyPatch);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a client by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClientsClientIdDeleteAsync (int clientId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a client by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClientsClientIdDeleteWithHttpInfoAsync (int clientId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a client by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ModelClient</returns>
        System.Threading.Tasks.Task<ModelClient> ClientsClientIdGetAsync (int clientId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a client by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelClient>> ClientsClientIdGetWithHttpInfoAsync (int clientId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a client by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="clientsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ModelClient</returns>
        System.Threading.Tasks.Task<ModelClient> ClientsClientIdPutAsync (int clientId, ClientsPostRequest clientsPostRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a client by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="clientsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelClient>> ClientsClientIdPutWithHttpInfoAsync (int clientId, ClientsPostRequest clientsPostRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all clients
        /// </summary>
        /// <remarks>
        /// Retrieves all clients
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<ModelClient></returns>
        System.Threading.Tasks.Task<List<ModelClient>> ClientsGetAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all clients
        /// </summary>
        /// <remarks>
        /// Retrieves all clients
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ModelClient&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelClient>>> ClientsGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create new client
        /// </summary>
        /// <remarks>
        /// Add a new client with given name and url
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ModelClient</returns>
        System.Threading.Tasks.Task<ModelClient> ClientsPostAsync (ClientsPostRequest clientsPostRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create new client
        /// </summary>
        /// <remarks>
        /// Add a new client with given name and url
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelClient>> ClientsPostWithHttpInfoAsync (ClientsPostRequest clientsPostRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContractsContractIdDeleteAsync (int contractId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContractsContractIdDeleteWithHttpInfoAsync (int contractId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Contract</returns>
        System.Threading.Tasks.Task<Contract> ContractsContractIdGetAsync (int contractId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contract>> ContractsContractIdGetWithHttpInfoAsync (int contractId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="contractPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Contract</returns>
        System.Threading.Tasks.Task<Contract> ContractsContractIdPutAsync (int contractId, ContractPatch contractPatch, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a contract by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="contractPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contract>> ContractsContractIdPutWithHttpInfoAsync (int contractId, ContractPatch contractPatch, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all contracts
        /// </summary>
        /// <remarks>
        /// Retrieves all contracts
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Contract></returns>
        System.Threading.Tasks.Task<List<Contract>> ContractsGetAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all contracts
        /// </summary>
        /// <remarks>
        /// Retrieves all contracts
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contract>>> ContractsGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create new contract
        /// </summary>
        /// <remarks>
        /// Add a new contract with fields
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Contract</returns>
        System.Threading.Tasks.Task<Contract> ContractsPostAsync (ContractPatch contractPatch, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create new contract
        /// </summary>
        /// <remarks>
        /// Add a new contract with fields
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contract>> ContractsPostWithHttpInfoAsync (ContractPatch contractPatch, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an employee by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EmployeesEmployeeIdDeleteAsync (int employeeId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an employee by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EmployeesEmployeeIdDeleteWithHttpInfoAsync (int employeeId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get an employee by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Employee</returns>
        System.Threading.Tasks.Task<Employee> EmployeesEmployeeIdGetAsync (int employeeId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get an employee by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Employee)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employee>> EmployeesEmployeeIdGetWithHttpInfoAsync (int employeeId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an employee by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="employeesPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Employee</returns>
        System.Threading.Tasks.Task<Employee> EmployeesEmployeeIdPutAsync (int employeeId, EmployeesPostRequest employeesPostRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an employee by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="employeesPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Employee)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employee>> EmployeesEmployeeIdPutWithHttpInfoAsync (int employeeId, EmployeesPostRequest employeesPostRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all employees
        /// </summary>
        /// <remarks>
        /// Retrieves all employees
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Employee></returns>
        System.Threading.Tasks.Task<List<Employee>> EmployeesGetAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all employees
        /// </summary>
        /// <remarks>
        /// Retrieves all employees
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Employee&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Employee>>> EmployeesGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create new employee
        /// </summary>
        /// <remarks>
        /// Add a new employee with given name and github username
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeesPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Employee</returns>
        System.Threading.Tasks.Task<Employee> EmployeesPostAsync (EmployeesPostRequest employeesPostRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create new employee
        /// </summary>
        /// <remarks>
        /// Add a new employee with given name and github username
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeesPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Employee)</returns>
        System.Threading.Tasks.Task<ApiResponse<Employee>> EmployeesPostWithHttpInfoAsync (EmployeesPostRequest employeesPostRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all history
        /// </summary>
        /// <remarks>
        /// Retrieves all employee contract assignment history
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">numerical employee identifier (optional)</param>
        /// <param name="clientId">numerical client identifier (optional)</param>
        /// <param name="contractId">numerical contract identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<History></returns>
        System.Threading.Tasks.Task<List<History>> HistoryGetAsync (int? employeeId = default(int?), int? clientId = default(int?), int? contractId = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all history
        /// </summary>
        /// <remarks>
        /// Retrieves all employee contract assignment history
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">numerical employee identifier (optional)</param>
        /// <param name="clientId">numerical client identifier (optional)</param>
        /// <param name="contractId">numerical contract identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;History&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<History>>> HistoryGetWithHttpInfoAsync (int? employeeId = default(int?), int? clientId = default(int?), int? contractId = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an employee contract assignment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HistoryHistoryIdDeleteAsync (int historyId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an employee contract assignment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HistoryHistoryIdDeleteWithHttpInfoAsync (int historyId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get an employee contract asignment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of History</returns>
        System.Threading.Tasks.Task<History> HistoryHistoryIdGetAsync (int historyId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get an employee contract asignment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (History)</returns>
        System.Threading.Tasks.Task<ApiResponse<History>> HistoryHistoryIdGetWithHttpInfoAsync (int historyId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an employee contract assignment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="historyPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Contract</returns>
        System.Threading.Tasks.Task<Contract> HistoryHistoryIdPutAsync (int historyId, HistoryPatch historyPatch, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an employee contract assignment by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="historyPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contract>> HistoryHistoryIdPutWithHttpInfoAsync (int historyId, HistoryPatch historyPatch, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create new employee contract assignment
        /// </summary>
        /// <remarks>
        /// Add a new contract assignment with fields
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of History</returns>
        System.Threading.Tasks.Task<History> HistoryPostAsync (HistoryPatch historyPatch, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create new employee contract assignment
        /// </summary>
        /// <remarks>
        /// Add a new contract assignment with fields
        /// </remarks>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (History)</returns>
        System.Threading.Tasks.Task<ApiResponse<History>> HistoryPostWithHttpInfoAsync (HistoryPatch historyPatch, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private SimpleTracker.Web.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new SimpleTracker.Web.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SimpleTracker.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = SimpleTracker.Web.Client.Configuration.Default;

            ExceptionFactory = SimpleTracker.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(SimpleTracker.Web.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SimpleTracker.Web.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SimpleTracker.Web.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SimpleTracker.Web.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SimpleTracker.Web.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a client by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns></returns>
        public void ClientsClientIdDelete (int clientId)
        {
             ClientsClientIdDeleteWithHttpInfo(clientId);
        }

        /// <summary>
        /// Delete a client by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClientsClientIdDeleteWithHttpInfo (int clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->ClientsClientIdDelete");

            var localVarPath = "/clients/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a client by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClientsClientIdDeleteAsync (int clientId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ClientsClientIdDeleteWithHttpInfoAsync(clientId, cancellationToken);

        }

        /// <summary>
        /// Delete a client by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClientsClientIdDeleteWithHttpInfoAsync (int clientId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->ClientsClientIdDelete");

            var localVarPath = "/clients/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a client by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ModelClient</returns>
        public ModelClient ClientsClientIdGet (int clientId)
        {
             ApiResponse<ModelClient> localVarResponse = ClientsClientIdGetWithHttpInfo(clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a client by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <returns>ApiResponse of ModelClient</returns>
        public ApiResponse<ModelClient> ClientsClientIdGetWithHttpInfo (int clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->ClientsClientIdGet");

            var localVarPath = "/clients/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelClient)));
        }

        /// <summary>
        /// Get a client by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ModelClient</returns>
        public async System.Threading.Tasks.Task<ModelClient> ClientsClientIdGetAsync (int clientId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ModelClient> localVarResponse = await ClientsClientIdGetWithHttpInfoAsync(clientId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a client by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelClient>> ClientsClientIdGetWithHttpInfoAsync (int clientId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->ClientsClientIdGet");

            var localVarPath = "/clients/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelClient)));
        }

        /// <summary>
        /// Update a client by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="clientsPostRequest"></param>
        /// <returns>ModelClient</returns>
        public ModelClient ClientsClientIdPut (int clientId, ClientsPostRequest clientsPostRequest)
        {
             ApiResponse<ModelClient> localVarResponse = ClientsClientIdPutWithHttpInfo(clientId, clientsPostRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a client by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="clientsPostRequest"></param>
        /// <returns>ApiResponse of ModelClient</returns>
        public ApiResponse<ModelClient> ClientsClientIdPutWithHttpInfo (int clientId, ClientsPostRequest clientsPostRequest)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->ClientsClientIdPut");
            // verify the required parameter 'clientsPostRequest' is set
            if (clientsPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'clientsPostRequest' when calling DefaultApi->ClientsClientIdPut");

            var localVarPath = "/clients/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (clientsPostRequest != null && clientsPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientsPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientsPostRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelClient)));
        }

        /// <summary>
        /// Update a client by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="clientsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ModelClient</returns>
        public async System.Threading.Tasks.Task<ModelClient> ClientsClientIdPutAsync (int clientId, ClientsPostRequest clientsPostRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ModelClient> localVarResponse = await ClientsClientIdPutWithHttpInfoAsync(clientId, clientsPostRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a client by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Numeric ID of the client</param>
        /// <param name="clientsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelClient>> ClientsClientIdPutWithHttpInfoAsync (int clientId, ClientsPostRequest clientsPostRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->ClientsClientIdPut");
            // verify the required parameter 'clientsPostRequest' is set
            if (clientsPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'clientsPostRequest' when calling DefaultApi->ClientsClientIdPut");

            var localVarPath = "/clients/{clientId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("clientId", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (clientsPostRequest != null && clientsPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientsPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientsPostRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsClientIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelClient)));
        }

        /// <summary>
        /// Get all clients Retrieves all clients
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<ModelClient></returns>
        public List<ModelClient> ClientsGet ()
        {
             ApiResponse<List<ModelClient>> localVarResponse = ClientsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all clients Retrieves all clients
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<ModelClient></returns>
        public ApiResponse<List<ModelClient>> ClientsGetWithHttpInfo ()
        {

            var localVarPath = "/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelClient>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ModelClient>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelClient>)));
        }

        /// <summary>
        /// Get all clients Retrieves all clients
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<ModelClient></returns>
        public async System.Threading.Tasks.Task<List<ModelClient>> ClientsGetAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ModelClient>> localVarResponse = await ClientsGetWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all clients Retrieves all clients
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ModelClient&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelClient>>> ClientsGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelClient>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ModelClient>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelClient>)));
        }

        /// <summary>
        /// Create new client Add a new client with given name and url
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientsPostRequest"></param>
        /// <returns>ModelClient</returns>
        public ModelClient ClientsPost (ClientsPostRequest clientsPostRequest)
        {
             ApiResponse<ModelClient> localVarResponse = ClientsPostWithHttpInfo(clientsPostRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new client Add a new client with given name and url
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientsPostRequest"></param>
        /// <returns>ApiResponse of ModelClient</returns>
        public ApiResponse<ModelClient> ClientsPostWithHttpInfo (ClientsPostRequest clientsPostRequest)
        {
            // verify the required parameter 'clientsPostRequest' is set
            if (clientsPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'clientsPostRequest' when calling DefaultApi->ClientsPost");

            var localVarPath = "/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientsPostRequest != null && clientsPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientsPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientsPostRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelClient)));
        }

        /// <summary>
        /// Create new client Add a new client with given name and url
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ModelClient</returns>
        public async System.Threading.Tasks.Task<ModelClient> ClientsPostAsync (ClientsPostRequest clientsPostRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ModelClient> localVarResponse = await ClientsPostWithHttpInfoAsync(clientsPostRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new client Add a new client with given name and url
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelClient>> ClientsPostWithHttpInfoAsync (ClientsPostRequest clientsPostRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'clientsPostRequest' is set
            if (clientsPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'clientsPostRequest' when calling DefaultApi->ClientsPost");

            var localVarPath = "/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientsPostRequest != null && clientsPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientsPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientsPostRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClientsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ModelClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelClient)));
        }

        /// <summary>
        /// Delete a contract by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <returns></returns>
        public void ContractsContractIdDelete (int contractId)
        {
             ContractsContractIdDeleteWithHttpInfo(contractId);
        }

        /// <summary>
        /// Delete a contract by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ContractsContractIdDeleteWithHttpInfo (int contractId)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdDelete");

            var localVarPath = "/contracts/{contractId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsContractIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a contract by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContractsContractIdDeleteAsync (int contractId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ContractsContractIdDeleteWithHttpInfoAsync(contractId, cancellationToken);

        }

        /// <summary>
        /// Delete a contract by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContractsContractIdDeleteWithHttpInfoAsync (int contractId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdDelete");

            var localVarPath = "/contracts/{contractId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsContractIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a contract by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <returns>Contract</returns>
        public Contract ContractsContractIdGet (int contractId)
        {
             ApiResponse<Contract> localVarResponse = ContractsContractIdGetWithHttpInfo(contractId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a contract by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <returns>ApiResponse of Contract</returns>
        public ApiResponse<Contract> ContractsContractIdGetWithHttpInfo (int contractId)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdGet");

            var localVarPath = "/contracts/{contractId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsContractIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Get a contract by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Contract</returns>
        public async System.Threading.Tasks.Task<Contract> ContractsContractIdGetAsync (int contractId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Contract> localVarResponse = await ContractsContractIdGetWithHttpInfoAsync(contractId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a contract by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contract>> ContractsContractIdGetWithHttpInfoAsync (int contractId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdGet");

            var localVarPath = "/contracts/{contractId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsContractIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Update a contract by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="contractPatch"></param>
        /// <returns>Contract</returns>
        public Contract ContractsContractIdPut (int contractId, ContractPatch contractPatch)
        {
             ApiResponse<Contract> localVarResponse = ContractsContractIdPutWithHttpInfo(contractId, contractPatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a contract by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="contractPatch"></param>
        /// <returns>ApiResponse of Contract</returns>
        public ApiResponse<Contract> ContractsContractIdPutWithHttpInfo (int contractId, ContractPatch contractPatch)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdPut");
            // verify the required parameter 'contractPatch' is set
            if (contractPatch == null)
                throw new ApiException(400, "Missing required parameter 'contractPatch' when calling DefaultApi->ContractsContractIdPut");

            var localVarPath = "/contracts/{contractId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (contractPatch != null && contractPatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contractPatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractPatch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsContractIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Update a contract by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="contractPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Contract</returns>
        public async System.Threading.Tasks.Task<Contract> ContractsContractIdPutAsync (int contractId, ContractPatch contractPatch, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Contract> localVarResponse = await ContractsContractIdPutWithHttpInfoAsync(contractId, contractPatch, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a contract by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Numeric ID of the contract</param>
        /// <param name="contractPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contract>> ContractsContractIdPutWithHttpInfoAsync (int contractId, ContractPatch contractPatch, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling DefaultApi->ContractsContractIdPut");
            // verify the required parameter 'contractPatch' is set
            if (contractPatch == null)
                throw new ApiException(400, "Missing required parameter 'contractPatch' when calling DefaultApi->ContractsContractIdPut");

            var localVarPath = "/contracts/{contractId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (contractPatch != null && contractPatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contractPatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractPatch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsContractIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Get all contracts Retrieves all contracts
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<Contract></returns>
        public List<Contract> ContractsGet ()
        {
             ApiResponse<List<Contract>> localVarResponse = ContractsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contracts Retrieves all contracts
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<Contract></returns>
        public ApiResponse<List<Contract>> ContractsGetWithHttpInfo ()
        {

            var localVarPath = "/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Contract>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        /// Get all contracts Retrieves all contracts
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Contract></returns>
        public async System.Threading.Tasks.Task<List<Contract>> ContractsGetAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Contract>> localVarResponse = await ContractsGetWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contracts Retrieves all contracts
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Contract&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contract>>> ContractsGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contract>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Contract>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contract>)));
        }

        /// <summary>
        /// Create new contract Add a new contract with fields
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractPatch"></param>
        /// <returns>Contract</returns>
        public Contract ContractsPost (ContractPatch contractPatch)
        {
             ApiResponse<Contract> localVarResponse = ContractsPostWithHttpInfo(contractPatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new contract Add a new contract with fields
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractPatch"></param>
        /// <returns>ApiResponse of Contract</returns>
        public ApiResponse<Contract> ContractsPostWithHttpInfo (ContractPatch contractPatch)
        {
            // verify the required parameter 'contractPatch' is set
            if (contractPatch == null)
                throw new ApiException(400, "Missing required parameter 'contractPatch' when calling DefaultApi->ContractsPost");

            var localVarPath = "/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractPatch != null && contractPatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contractPatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractPatch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Create new contract Add a new contract with fields
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Contract</returns>
        public async System.Threading.Tasks.Task<Contract> ContractsPostAsync (ContractPatch contractPatch, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Contract> localVarResponse = await ContractsPostWithHttpInfoAsync(contractPatch, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new contract Add a new contract with fields
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contract>> ContractsPostWithHttpInfoAsync (ContractPatch contractPatch, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contractPatch' is set
            if (contractPatch == null)
                throw new ApiException(400, "Missing required parameter 'contractPatch' when calling DefaultApi->ContractsPost");

            var localVarPath = "/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractPatch != null && contractPatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contractPatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contractPatch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContractsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Delete an employee by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <returns></returns>
        public void EmployeesEmployeeIdDelete (int employeeId)
        {
             EmployeesEmployeeIdDeleteWithHttpInfo(employeeId);
        }

        /// <summary>
        /// Delete an employee by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EmployeesEmployeeIdDeleteWithHttpInfo (int employeeId)
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling DefaultApi->EmployeesEmployeeIdDelete");

            var localVarPath = "/employees/{employeeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarPathParams.Add("employeeId", this.Configuration.ApiClient.ParameterToString(employeeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmployeesEmployeeIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an employee by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EmployeesEmployeeIdDeleteAsync (int employeeId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await EmployeesEmployeeIdDeleteWithHttpInfoAsync(employeeId, cancellationToken);

        }

        /// <summary>
        /// Delete an employee by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EmployeesEmployeeIdDeleteWithHttpInfoAsync (int employeeId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling DefaultApi->EmployeesEmployeeIdDelete");

            var localVarPath = "/employees/{employeeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarPathParams.Add("employeeId", this.Configuration.ApiClient.ParameterToString(employeeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmployeesEmployeeIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an employee by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <returns>Employee</returns>
        public Employee EmployeesEmployeeIdGet (int employeeId)
        {
             ApiResponse<Employee> localVarResponse = EmployeesEmployeeIdGetWithHttpInfo(employeeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an employee by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <returns>ApiResponse of Employee</returns>
        public ApiResponse<Employee> EmployeesEmployeeIdGetWithHttpInfo (int employeeId)
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling DefaultApi->EmployeesEmployeeIdGet");

            var localVarPath = "/employees/{employeeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarPathParams.Add("employeeId", this.Configuration.ApiClient.ParameterToString(employeeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmployeesEmployeeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Employee) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Employee)));
        }

        /// <summary>
        /// Get an employee by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Employee</returns>
        public async System.Threading.Tasks.Task<Employee> EmployeesEmployeeIdGetAsync (int employeeId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Employee> localVarResponse = await EmployeesEmployeeIdGetWithHttpInfoAsync(employeeId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an employee by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Employee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Employee>> EmployeesEmployeeIdGetWithHttpInfoAsync (int employeeId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling DefaultApi->EmployeesEmployeeIdGet");

            var localVarPath = "/employees/{employeeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarPathParams.Add("employeeId", this.Configuration.ApiClient.ParameterToString(employeeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmployeesEmployeeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Employee) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Employee)));
        }

        /// <summary>
        /// Update an employee by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="employeesPostRequest"></param>
        /// <returns>Employee</returns>
        public Employee EmployeesEmployeeIdPut (int employeeId, EmployeesPostRequest employeesPostRequest)
        {
             ApiResponse<Employee> localVarResponse = EmployeesEmployeeIdPutWithHttpInfo(employeeId, employeesPostRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an employee by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="employeesPostRequest"></param>
        /// <returns>ApiResponse of Employee</returns>
        public ApiResponse<Employee> EmployeesEmployeeIdPutWithHttpInfo (int employeeId, EmployeesPostRequest employeesPostRequest)
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling DefaultApi->EmployeesEmployeeIdPut");
            // verify the required parameter 'employeesPostRequest' is set
            if (employeesPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'employeesPostRequest' when calling DefaultApi->EmployeesEmployeeIdPut");

            var localVarPath = "/employees/{employeeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarPathParams.Add("employeeId", this.Configuration.ApiClient.ParameterToString(employeeId)); // path parameter
            if (employeesPostRequest != null && employeesPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(employeesPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = employeesPostRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmployeesEmployeeIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Employee) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Employee)));
        }

        /// <summary>
        /// Update an employee by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="employeesPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Employee</returns>
        public async System.Threading.Tasks.Task<Employee> EmployeesEmployeeIdPutAsync (int employeeId, EmployeesPostRequest employeesPostRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Employee> localVarResponse = await EmployeesEmployeeIdPutWithHttpInfoAsync(employeeId, employeesPostRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an employee by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">Numeric ID of the employee</param>
        /// <param name="employeesPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Employee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Employee>> EmployeesEmployeeIdPutWithHttpInfoAsync (int employeeId, EmployeesPostRequest employeesPostRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'employeeId' is set
            if (employeeId == null)
                throw new ApiException(400, "Missing required parameter 'employeeId' when calling DefaultApi->EmployeesEmployeeIdPut");
            // verify the required parameter 'employeesPostRequest' is set
            if (employeesPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'employeesPostRequest' when calling DefaultApi->EmployeesEmployeeIdPut");

            var localVarPath = "/employees/{employeeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarPathParams.Add("employeeId", this.Configuration.ApiClient.ParameterToString(employeeId)); // path parameter
            if (employeesPostRequest != null && employeesPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(employeesPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = employeesPostRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmployeesEmployeeIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Employee) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Employee)));
        }

        /// <summary>
        /// Get all employees Retrieves all employees
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<Employee></returns>
        public List<Employee> EmployeesGet ()
        {
             ApiResponse<List<Employee>> localVarResponse = EmployeesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all employees Retrieves all employees
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<Employee></returns>
        public ApiResponse<List<Employee>> EmployeesGetWithHttpInfo ()
        {

            var localVarPath = "/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmployeesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Employee>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Employee>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Employee>)));
        }

        /// <summary>
        /// Get all employees Retrieves all employees
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Employee></returns>
        public async System.Threading.Tasks.Task<List<Employee>> EmployeesGetAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Employee>> localVarResponse = await EmployeesGetWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all employees Retrieves all employees
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Employee&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Employee>>> EmployeesGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmployeesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Employee>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Employee>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Employee>)));
        }

        /// <summary>
        /// Create new employee Add a new employee with given name and github username
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeesPostRequest"></param>
        /// <returns>Employee</returns>
        public Employee EmployeesPost (EmployeesPostRequest employeesPostRequest)
        {
             ApiResponse<Employee> localVarResponse = EmployeesPostWithHttpInfo(employeesPostRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new employee Add a new employee with given name and github username
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeesPostRequest"></param>
        /// <returns>ApiResponse of Employee</returns>
        public ApiResponse<Employee> EmployeesPostWithHttpInfo (EmployeesPostRequest employeesPostRequest)
        {
            // verify the required parameter 'employeesPostRequest' is set
            if (employeesPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'employeesPostRequest' when calling DefaultApi->EmployeesPost");

            var localVarPath = "/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeesPostRequest != null && employeesPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(employeesPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = employeesPostRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmployeesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Employee) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Employee)));
        }

        /// <summary>
        /// Create new employee Add a new employee with given name and github username
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeesPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Employee</returns>
        public async System.Threading.Tasks.Task<Employee> EmployeesPostAsync (EmployeesPostRequest employeesPostRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Employee> localVarResponse = await EmployeesPostWithHttpInfoAsync(employeesPostRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new employee Add a new employee with given name and github username
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeesPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Employee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Employee>> EmployeesPostWithHttpInfoAsync (EmployeesPostRequest employeesPostRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'employeesPostRequest' is set
            if (employeesPostRequest == null)
                throw new ApiException(400, "Missing required parameter 'employeesPostRequest' when calling DefaultApi->EmployeesPost");

            var localVarPath = "/employees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeesPostRequest != null && employeesPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(employeesPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = employeesPostRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EmployeesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Employee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Employee) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Employee)));
        }

        /// <summary>
        /// Get all history Retrieves all employee contract assignment history
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">numerical employee identifier (optional)</param>
        /// <param name="clientId">numerical client identifier (optional)</param>
        /// <param name="contractId">numerical contract identifier (optional)</param>
        /// <returns>List<History></returns>
        public List<History> HistoryGet (int? employeeId = default(int?), int? clientId = default(int?), int? contractId = default(int?))
        {
             ApiResponse<List<History>> localVarResponse = HistoryGetWithHttpInfo(employeeId, clientId, contractId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all history Retrieves all employee contract assignment history
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">numerical employee identifier (optional)</param>
        /// <param name="clientId">numerical client identifier (optional)</param>
        /// <param name="contractId">numerical contract identifier (optional)</param>
        /// <returns>ApiResponse of List<History></returns>
        public ApiResponse<List<History>> HistoryGetWithHttpInfo (int? employeeId = default(int?), int? clientId = default(int?), int? contractId = default(int?))
        {

            var localVarPath = "/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "employeeId", employeeId)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (contractId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contractId", contractId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<History>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<History>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<History>)));
        }

        /// <summary>
        /// Get all history Retrieves all employee contract assignment history
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">numerical employee identifier (optional)</param>
        /// <param name="clientId">numerical client identifier (optional)</param>
        /// <param name="contractId">numerical contract identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<History></returns>
        public async System.Threading.Tasks.Task<List<History>> HistoryGetAsync (int? employeeId = default(int?), int? clientId = default(int?), int? contractId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<History>> localVarResponse = await HistoryGetWithHttpInfoAsync(employeeId, clientId, contractId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all history Retrieves all employee contract assignment history
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">numerical employee identifier (optional)</param>
        /// <param name="clientId">numerical client identifier (optional)</param>
        /// <param name="contractId">numerical contract identifier (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;History&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<History>>> HistoryGetWithHttpInfoAsync (int? employeeId = default(int?), int? clientId = default(int?), int? contractId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (employeeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "employeeId", employeeId)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (contractId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contractId", contractId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<History>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<History>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<History>)));
        }

        /// <summary>
        /// Delete an employee contract assignment by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <returns></returns>
        public void HistoryHistoryIdDelete (int historyId)
        {
             HistoryHistoryIdDeleteWithHttpInfo(historyId);
        }

        /// <summary>
        /// Delete an employee contract assignment by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HistoryHistoryIdDeleteWithHttpInfo (int historyId)
        {
            // verify the required parameter 'historyId' is set
            if (historyId == null)
                throw new ApiException(400, "Missing required parameter 'historyId' when calling DefaultApi->HistoryHistoryIdDelete");

            var localVarPath = "/history/{historyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (historyId != null) localVarPathParams.Add("historyId", this.Configuration.ApiClient.ParameterToString(historyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HistoryHistoryIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an employee contract assignment by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HistoryHistoryIdDeleteAsync (int historyId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await HistoryHistoryIdDeleteWithHttpInfoAsync(historyId, cancellationToken);

        }

        /// <summary>
        /// Delete an employee contract assignment by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HistoryHistoryIdDeleteWithHttpInfoAsync (int historyId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'historyId' is set
            if (historyId == null)
                throw new ApiException(400, "Missing required parameter 'historyId' when calling DefaultApi->HistoryHistoryIdDelete");

            var localVarPath = "/history/{historyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (historyId != null) localVarPathParams.Add("historyId", this.Configuration.ApiClient.ParameterToString(historyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HistoryHistoryIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an employee contract asignment by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <returns>History</returns>
        public History HistoryHistoryIdGet (int historyId)
        {
             ApiResponse<History> localVarResponse = HistoryHistoryIdGetWithHttpInfo(historyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an employee contract asignment by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <returns>ApiResponse of History</returns>
        public ApiResponse<History> HistoryHistoryIdGetWithHttpInfo (int historyId)
        {
            // verify the required parameter 'historyId' is set
            if (historyId == null)
                throw new ApiException(400, "Missing required parameter 'historyId' when calling DefaultApi->HistoryHistoryIdGet");

            var localVarPath = "/history/{historyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (historyId != null) localVarPathParams.Add("historyId", this.Configuration.ApiClient.ParameterToString(historyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HistoryHistoryIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<History>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (History) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(History)));
        }

        /// <summary>
        /// Get an employee contract asignment by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of History</returns>
        public async System.Threading.Tasks.Task<History> HistoryHistoryIdGetAsync (int historyId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<History> localVarResponse = await HistoryHistoryIdGetWithHttpInfoAsync(historyId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an employee contract asignment by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (History)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<History>> HistoryHistoryIdGetWithHttpInfoAsync (int historyId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'historyId' is set
            if (historyId == null)
                throw new ApiException(400, "Missing required parameter 'historyId' when calling DefaultApi->HistoryHistoryIdGet");

            var localVarPath = "/history/{historyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (historyId != null) localVarPathParams.Add("historyId", this.Configuration.ApiClient.ParameterToString(historyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HistoryHistoryIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<History>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (History) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(History)));
        }

        /// <summary>
        /// Update an employee contract assignment by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="historyPatch"></param>
        /// <returns>Contract</returns>
        public Contract HistoryHistoryIdPut (int historyId, HistoryPatch historyPatch)
        {
             ApiResponse<Contract> localVarResponse = HistoryHistoryIdPutWithHttpInfo(historyId, historyPatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an employee contract assignment by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="historyPatch"></param>
        /// <returns>ApiResponse of Contract</returns>
        public ApiResponse<Contract> HistoryHistoryIdPutWithHttpInfo (int historyId, HistoryPatch historyPatch)
        {
            // verify the required parameter 'historyId' is set
            if (historyId == null)
                throw new ApiException(400, "Missing required parameter 'historyId' when calling DefaultApi->HistoryHistoryIdPut");
            // verify the required parameter 'historyPatch' is set
            if (historyPatch == null)
                throw new ApiException(400, "Missing required parameter 'historyPatch' when calling DefaultApi->HistoryHistoryIdPut");

            var localVarPath = "/history/{historyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (historyId != null) localVarPathParams.Add("historyId", this.Configuration.ApiClient.ParameterToString(historyId)); // path parameter
            if (historyPatch != null && historyPatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(historyPatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = historyPatch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HistoryHistoryIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Update an employee contract assignment by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="historyPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Contract</returns>
        public async System.Threading.Tasks.Task<Contract> HistoryHistoryIdPutAsync (int historyId, HistoryPatch historyPatch, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Contract> localVarResponse = await HistoryHistoryIdPutWithHttpInfoAsync(historyId, historyPatch, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an employee contract assignment by ID 
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyId">Numeric ID of the employee contract assignment</param>
        /// <param name="historyPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Contract)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contract>> HistoryHistoryIdPutWithHttpInfoAsync (int historyId, HistoryPatch historyPatch, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'historyId' is set
            if (historyId == null)
                throw new ApiException(400, "Missing required parameter 'historyId' when calling DefaultApi->HistoryHistoryIdPut");
            // verify the required parameter 'historyPatch' is set
            if (historyPatch == null)
                throw new ApiException(400, "Missing required parameter 'historyPatch' when calling DefaultApi->HistoryHistoryIdPut");

            var localVarPath = "/history/{historyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (historyId != null) localVarPathParams.Add("historyId", this.Configuration.ApiClient.ParameterToString(historyId)); // path parameter
            if (historyPatch != null && historyPatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(historyPatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = historyPatch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HistoryHistoryIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Contract) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contract)));
        }

        /// <summary>
        /// Create new employee contract assignment Add a new contract assignment with fields
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyPatch"></param>
        /// <returns>History</returns>
        public History HistoryPost (HistoryPatch historyPatch)
        {
             ApiResponse<History> localVarResponse = HistoryPostWithHttpInfo(historyPatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new employee contract assignment Add a new contract assignment with fields
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyPatch"></param>
        /// <returns>ApiResponse of History</returns>
        public ApiResponse<History> HistoryPostWithHttpInfo (HistoryPatch historyPatch)
        {
            // verify the required parameter 'historyPatch' is set
            if (historyPatch == null)
                throw new ApiException(400, "Missing required parameter 'historyPatch' when calling DefaultApi->HistoryPost");

            var localVarPath = "/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (historyPatch != null && historyPatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(historyPatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = historyPatch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HistoryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<History>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (History) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(History)));
        }

        /// <summary>
        /// Create new employee contract assignment Add a new contract assignment with fields
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of History</returns>
        public async System.Threading.Tasks.Task<History> HistoryPostAsync (HistoryPatch historyPatch, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<History> localVarResponse = await HistoryPostWithHttpInfoAsync(historyPatch, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new employee contract assignment Add a new contract assignment with fields
        /// </summary>
        /// <exception cref="SimpleTracker.Web.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyPatch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (History)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<History>> HistoryPostWithHttpInfoAsync (HistoryPatch historyPatch, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'historyPatch' is set
            if (historyPatch == null)
                throw new ApiException(400, "Missing required parameter 'historyPatch' when calling DefaultApi->HistoryPost");

            var localVarPath = "/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (historyPatch != null && historyPatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(historyPatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = historyPatch; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HistoryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<History>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (History) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(History)));
        }

    }
}
